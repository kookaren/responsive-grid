html{
  scroll-behavior: smooth;
}

body{
  background-color: #737373;
  font-size: 18px;
  line-height: 1.15;
  margin: 0;
  padding: 0;
}


.overview{
  background-attachment: fixed; /* Parallax effect */     
  background-position: center;  /* Parallax effect */
  background-size: cover;   
  background-repeat: no-repeat; /* Parallax effect */
  background-image: url('../images/header.jpg');    /* Parallax effect */
  color: white;
  height: 400px;                /* Parallax effect */
  
}



.overview p{
  color: white;
  font-size: 24px;
  padding: 0 100px;
  text-align: center;
  
}

h1{
  font-size: 50px;
  line-height: 1;
  padding: 50px 0;
  text-align: center;
}

h2{
  font-size: 32px;
  line-height: 1.5;
  
}

nav li{
  display:inline;
  padding-right:20px;

}

nav a{
  color: black;
  font-weight: bold;
  text-decoration: none; 

}


.skip a{
  background: white;
  left: 0;
  top: -40px;
  padding: 6px;
  -webkit-transition: top 1s ease-out;
  transition: top 1ss ease-out;
  z-index: 1;
  position: absolute; 
}



.skip a:hover, .skip a:focus{
  background: white;
  left: 0;
  top: 20px;
  padding: 6px;
  -webkit-transition: top 1s ease-out;
  transition: top 1ss ease-out;
  z-index: 1;
  position: absolute; 
}


.text-block h2 {
  font-size: 32px;
  line-height: 1.5;
  text-align: left;
   
}


.text-block p {
  text-align: left;
  
}


nav{
  background-color: #ddd;
  padding: 25px 0; 
}

footer{
  background-color: black;
  color: white;
  padding-top: 30px;
  text-align: center;
}


.text-block{

  background-color: rgba(255, 255, 255, .8);
  border: 10px solid black;
  padding: 30px;
    position: relative;

    max-height: 250px; /* Maximum height of 250px */
    overflow: auto; /* Allow content to be scrollable if it overflows */
}



.overview p{
  background-attachment: fixed; /* Parallax effect */     
  background-position: center;  /* Parallax effect */
  background-size: cover;   
  background-repeat: no-repeat; /* Parallax effect */
  background-image: url('../images/header.jpg');    /* Parallax effect */

}



@media screen and (prefers-reduced-motion: reduce){
  html{
      scroll-behavior: auto; /* Removes scroll animation */
  }

  .skip a{
    -webkit-transition: none; /* sets to default setting */
    transition: none;        /* sets to default setting */
   }

  /*Turn off parallax*/
  header{
    background-attachment: initial;
  }

}



/*Your Code Here*/
/* PLEASE DO NOT REMOVE MY COMMENTS.  THEY HELP US HELP YOU DEBUG. */

nav a:hover,
nav a:focus {
  text-decoration: underline;
  
}


/* Step 1: Write selector/rule property to add an underline when
links in the navigation are in the hover or focus state.*/




/* Step 2a: Write selector/rule property to position the default position for the skip class element*/


/* Step 2b: Write selector/rule property to position the skip class element when it is in focus*/

*:focus {
    border-style: solid;
    border-radius: 2px;
  }
/* Step 3: Write selector/rule property to style all elements when in focus*/

img {
  width: 100%; 
}


/* Step 4: Write selector/rule property to style the container */



/* Step 5: Write selector/rule property to add the background image to the 
first div in the grid  and place it in the grid. */



/* Steps 6 and 7: Write the selector/rule properties to add place the next elements in the next
 four rows in the grid. */

      /*This will be a lot of rules.... but be strategic and combine seletors*/


 /* Step 8: Write the selector/rule property to style the .text-block class. */

  .container {
    display: grid;
    grid-template-columns: 1fr 5fr 1fr;
    gap: 15px;
    align-items: center;
  }

  .container > :first-child{
    grid-column: 1 / -1;
    min-height: 500px;

  }






  .about.text-block {
    grid-row: 2;
    grid-column: 2;
  }

  .about-image {
    grid-row: 2;
    grid-column: 2;
    grid-column: 1 / -1; /* Cover all columns */
    max-height: 600px; /* Maximum height of 600px */
    overflow: hidden; /* Hide content that overflows the grid cell */
  }
  .method.text-block {
    grid-row: 3;
    grid-column: 2;
  }


  .method-image {
    grid-row: 3;
    grid-column: 2;
    grid-column: 1 / -1; /* Cover all columns */
    max-height: 600px; /* Maximum height of 600px */
    overflow: hidden; /* Hide content that overflows the grid cell */
  }

  .contact.text-block {
    grid-row: 5;
    grid-column: 2;
  }
  

  .contact-image {
    grid-row: 5;
    grid-column: 2;
    grid-column: 1 / -1; /* Cover all columns */
    max-height: 600px; /* Maximum height of 600px */
    overflow: hidden; /* Hide content that overflows the grid cell */
  }

  .clients.text-block {
    grid-row: 4;
    grid-column: 2;
  }

  .clients-image {
    grid-row: 4;
    grid-column: 2;
    grid-column: 1 / -1; /* Cover all columns */
    max-height: 600px; /* Maximum height of 600px */
    overflow: hidden; /* Hide content that overflows the grid cell */
  }



@media screen and (min-width: 800px) {
  nav {
    text-align: right;
    padding-top: 30px;
    padding-left: 0px;
    padding-right: 0px;
  }

  .container {
    display: grid;
    grid-template-columns: 50px auto 500px auto 50px;
    align-items: center;
  }

  

  /* .about, .clients, .method-image, .contact-image {
    grid-column: 3 / span 2; /* Begin in the 2nd column and span one column 

  } 
  */
  

  .about.text-block {
    grid-row: 2; 
    grid-column: 3 / span 2; 

  }

  .about-image {
    grid-row: 2; 
    grid-column: 2 / span 2; 
  }

  .method-image {
    grid-row: 3; 
    grid-column: 3 / span 2;
  }
  
  .method.text-block{
    grid-row: 3;
    grid-column: 2 / span 2;
  }

  .clients.text-block {
    grid-row: 4; 
    grid-column: 3 / span 2; 

  }

  .clients-image {
    grid-row: 4; 
    grid-column: 2 / span 2; 
  }


  .contact-image {
    grid-row: 5; 
    grid-column: 3 / span 2;
  }
  
  .contact.text-block {
    grid-row: 5;
    grid-column: 2 / span 2;
  }
  
}


/* Add your media query here */


  /* Step 9: Write the selector/rule property to style the nav element */

 
  /* Step 10: Write the selector/rule property to update the .container class */



  /* Steps 11 and 12: Update the grid-column property of the grid's children (where-needed)*/


